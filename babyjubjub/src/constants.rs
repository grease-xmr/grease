//! Baby Jubjub constants
//!
//! https://eips.ethereum.org/EIPS/eip-2494

use crate::Fq;
use ark_ff::biginteger::BigInteger256;
use ark_ff::{BigInt, MontFp};

/// The BabyJubJub curve has order n.
/// n = 21888242871839275222246405745257275088614511777268538073601725287587578984328
pub const ORDER_BJJ: BigInteger256 =
    BigInt!("21888242871839275222246405745257275088614511777268538073601725287587578984328");

/// The largest prime factor of n, called l, determines the security of the curve.
/// l = 2736030358979909402780800718157159386076813972158567259200215660948447373041 and is 251 bits.
pub const SUBORDER_BJJ: BigInteger256 =
    BigInt!("2736030358979909402780800718157159386076813972158567259200215660948447373041");

/// The cofactor of the curve, h = 8. h * l = n.
pub const COFACTOR_BJJ: u64 = 8;

// The base point B = (x,y) with the coordinates below generates the subgroup of points P of Baby Jubjub satisfying
// l * P = O. That is, it generates the set of points of order l and origin O.
// x = 5299619240641551281634865583518297030282874472190772894086521144482721001553
// y = 16950150798460657717958625567821834550301663161624707787222815936182638968203
pub const B_X_BJJ: Fq = MontFp!("5299619240641551281634865583518297030282874472190772894086521144482721001553");
pub const B_Y_BJJ: Fq = MontFp!("16950150798460657717958625567821834550301663161624707787222815936182638968203");

// The point G = (x,y) with coordinates below generates all n points of the curve.
// x = 995203441582195749578291179787384436505546430278305826713579947235728471134
// y = 5472060717959818805561601436314318772137091100104008585924551046643952123905
pub const G_X_BJJ: Fq = MontFp!("995203441582195749578291179787384436505546430278305826713579947235728471134");
pub const G_Y_BJJ: Fq = MontFp!("5472060717959818805561601436314318772137091100104008585924551046643952123905");
